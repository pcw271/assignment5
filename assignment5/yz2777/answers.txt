1. 
When I use the Shell to run the Python 3 for the adventure.py, I got an error message such that "NameError: name 'raw_input' is not defined". By checking the online Python Doc (https://docs.python.org/3/whatsnew/3.0.html), "raw_input()" in python 2 has been renamed to "input()" in Python 3. So, after I changed "raw_input('> ')" (line 37, in adventure.py) to "input('> ')", the program works. 

The other problem I met is occurred when I run the tests by using walkthrough1.txt and walkthrough2.txt. By default, the program is only tested by syntax.txt and vignettes.txt. Tests can be passed by both of them. After removing "#" from the test_walks.py, the program can also be tested by walkthrough1.txt and walkthrough2.txt. However, I got error messages for both of them when I run the tests. For walkthrough1.txt, the error occurred at line 863 (i.e. adventure.resume(savefile), NameError: name 'adventure' is not defined). For walkthrough2.txt, the error occurred at line 1172 (i.e. adventure._game.clock1, NameError: name 'adventure' is notdefined). By checking, "adventure" should be "play" since the "resume" function and "_game" are all in the play.py. After correcting the problem in both files, tests can be passed.

I also changed "> save advent.save" (line 41 of readme.txt) to "> save advent" by removing the "." since the game cannot be saved if the name of save file contains ".".
   

2. 
First, the author used modular programming which means that the author wrote small modules separately (e.g. game.py and play.py) and then combined together to perform the function of the whole program.
Second, the author used class organization that combines both structural and behavioral components. For example, in game.py, "class Game(Data)" (line 19) was used. It contains a set of functions such as "def random(self)" (line 57), "def choice(self, seq)" (line 60) and so on.
Third, this program is test driven development. The author wrote test and production code together to check for the correct results.


3. 
Yes, the author has used some meaningful names when developing this program. For example, in game.py, "YESNO_ANSWERS" (line 17) means that our answers are yes or no; "must_allow_move" (line 165) means that the game must allow us to continune move; "knife_wounds" (line 210) means the wounds caused by knife. But, such as "attrgetter" (line 13) in game.py, "baudout" (line 13) in adventure.py, and "klass" (line 40) in data.py are some names may not meaningful. Meaanwhile, in data.py, the names of functions such as "section 1()" (line 59), "section 2()", ..., and "section 12()" are also not meaningless.


4. 
Some functions used in the code do one thing. For instance, in model.py, "def is_aboveground(self)" (line 67) just return a number, "def is_before_hall_of_mists(self)" (line 71) also just return a number and "def is_dark(self)" (line 79) just check whether is dark. Also, there are functions do more than one thing. For example, in model.py, "def __repr__(self)" (line 11) not only check "condition" but also check "action".


5. 
It seems like some functions cause side effects. For example, the function "def parse(data, datafile)" (line 198 to 225) in data.py has side-effect. This function returns the "data" at the end which means that it will change the global "data" what we input.


6. 
It seems that play.py contains repeated code. Line 11 to 27 are function "def play(seed=None)" and line 29 to 38 are function "def resume(savefile, quiet=False)". We can see the two functions are all starting from the same code:

  global _game

  from game import Game
  from prompt import install_words

Meanwhile, by checking the other part of the code of the two functions, the function "play" is used to start game by a random seed and function "resume" is used to resume the game by a save file. Intuitively, the two functions do not have much difference in functionality. They could be made into one function by using if-else logic.


7. 
The program does use exception handling. It throws exceptions rather than return error codes. For instance, based on adventure.py (line 42 to 46), the program tries to run the loop() again and again until the user input the correct answer rather than terminate the program with the error. I did not find any input that causes the program to terminate abnormally. However, I encountered strange reponses. The program will usually reponse "I DON'T KNOW THAT WORD." or "WHAT?" when I input the wrong characters (e.g. abc), numbers (e.g. 123) or combined (e.g. 1db4). But, when I input symbol (e.g. */+-), the program will response nothing but it is not terminated. Also, in order to save the game, using command "save advent.save" will response "I DON'T KNOW THAT WORD." while it works when "." was removed such as "save adventsave".


8. 
"class Game(Data)" (start from line 19 in game.py) has responsibility over more than one piece of functionality. It defines such that inventory can be used, dark or light of the cave, location, the player is still alive or dead and also how to make a movement and so on.


9. 
"class Game(Data)" in game.py is not cohesive. For example, from line 81 to 110, these functions are used to define the properties of the cave. But from line 1649 to 1696 (def compute_score), it is actually used to calculate the final score of the game. So, the functions of these two parts are not in common. They should be sperated into two classes.


10. 
Good comments made by author: First, public APIs at the beginning of the modules or functions (e.g. line 1 of adventure.py, """Offer Adventure at a custom command prompt."""). Second, made legal comments (e.g., line 3 to 7 of game.py, the author described how his code refer to the original FORTRAN code). Third, explanation of intent (e.g., line 148 of game.py, # Routines that handle the aftermath of "big" actions like movement.). But there are also some redundant or noise comments such as the comment for the "is_dead = False" (i.e. # whether we are currently dead) and comment for "dwarves_killed = 0" (i.e. # DKILL). They are quite useless.


11. 
From line 153 to 186 of the game.py (i.e. def move_to(self, newloc=None)) has used vertical formatting to make the code clear. We can see that the author used blank line to split this function into several parts and variables were declared closely to their usage.
For example,

  loc = self.loc
  if newloc is None:
        newloc = loc

  if self.is_closing and newloc.is_aboveground:
      self.write_message(130)
      newloc = loc  # cancel move and put him back underground
      if not self.panic:
          self.clock2 = 15
          self.panic = True


12. 
The tests based on the four text files: syntax.txt, vignettes.txt, walkthrough1.txt and walkthrough2.txt. As mentioned in question 1, the tests can be passed by all of these four files after I changed the "adventure" to "play" in walkthrough1.txt and walkthrough2.txt.
I think the tests may meet the F.I.R.S.T. criteria: 
The tests are fast (F): the tests can be completed within 3 to 4 seconds in the computer. 
The tests are independent (I): the four text files conduct four different tests. The tests can be still passed regardless the order of the files and the number of the files (at least one file) I use. 
The tests are repeatable (R): tests are repeatable in any environment and the results are all the same.
The tests are self-validating (S): the tests provide either pass or fail. Here, we can see the tests results are "OK" means pass.
The tests may be timely (T): the author maybe wrote the tests during code development since we can find how to use the tests from the readme.txt. However, it is difficult to judge.